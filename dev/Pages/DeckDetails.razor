@page "/decks/{deckId}"
@using BlazorApp.Data;
@inherits DeckDetailsBase
@inject NavigationManager _nav
@using static BlazorApp.Helpers.CssClassInlineBuilder;

<h3>@PageTitle @Deck?.Name (@TotalCards cartes)</h3>

@if (Cards == null)
{
	<p><em>Chargement des cartes en cours...</em></p>
}
else
{
	<button @onclick="@(() => _nav.NavigateTo("/decks"))">Retour</button>
	<div id="deckFilters">
		<div class="deckColors">
			@if (Deck != null && Deck.Cards.Any(card => card.Value.card.Colors.Count() > 1))
			{
				<img class="colorIcon @CssClassBicolor" @onclick="@(() => DisplayColor(ECardColor.BICOLOR))" src="/all_colors_icon.png" alt="add" height="30" width="30" />
			}
			@if (Deck != null && Deck.Colors.Contains(Data.ECardColor.GREEN))
			{
				<img class="colorIcon @CssClassGreen" @onclick="@(() => DisplayColor(ECardColor.GREEN))" src="/forest.png" alt="add" />
			}
			@if (Deck != null && Deck.Colors.Contains(Data.ECardColor.BLUE))
			{
				<img class="colorIcon @CssClassBlue" @onclick="@(() => DisplayColor(ECardColor.BLUE))" src="/island.png" alt="add" />
			}
			@if (Deck != null && Deck.Colors.Contains(Data.ECardColor.RED))
			{
				<img class="colorIcon @CssClassRed" @onclick="@(() => DisplayColor(ECardColor.RED))" src="/mountain.png" alt="add" />
			}
			@if (Deck != null && Deck.Colors.Contains(Data.ECardColor.WHITE))
			{
				<img class="colorIcon @CssClassWhite" @onclick="@(() => DisplayColor(ECardColor.WHITE))" src="/plain.png" alt="add" />
			}
			@if (Deck != null && Deck.Colors.Contains(Data.ECardColor.BLACK))
			{
				<img class="colorIcon @CssClassBlack" @onclick="@(() => DisplayColor(ECardColor.BLACK))" src="/swamp.png" alt="add" />
			}
			@if (Deck != null && Deck.Cards.Any(card => card.Value.card.Colors.Count() == 0))
			{
				<img class="colorIcon @CssClassArtifact" @onclick="@(() => DisplayColor(ECardColor.ARTIFACT))" src="/artifact.svg" alt="add" />
			}
		</div>
		<div id="deckRarities">
			<img class="rarityIcon @CssClassCommon" @onclick="@(() => DisplayRarity(ECardRarity.COMMON))" src="/common_icon.png" height="35" width="35" />
			<img class="rarityIcon @CssClassUncommon" @onclick="@(() => DisplayRarity(ECardRarity.UNCOMMON))" src="/uncommon_icon.png" height="35" width="35" />
			<img class="rarityIcon @CssClassRare" @onclick="@(() => DisplayRarity(ECardRarity.RARE))" src="/rare_icon.png" height="35" width="35" />
			<img class="rarityIcon @CssClassMythic" @onclick="@(() => DisplayRarity(ECardRarity.MYTHIC))" src="/mythic_icon.png" height="35" width="35" />
		</div>
		<p id="nbCardsText">@NbDisplayedCards / @Deck?.Cards.Count()</p>
	</div>
	<div id="cardsList">
		@for (int i = 0; i < Cards.Count(); i++)
		{
			<CardComponent Card="@Cards.ElementAt(i).Value.card" AllowAddToCollection="false" AllowRemoveFromCollection="false" />
		}
	</div>
}

